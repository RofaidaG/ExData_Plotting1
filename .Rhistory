rm(list=ls())
source('~/.active-rstudio-document')
naga7k()
source('~/.active-rstudio-document')
naga7k()
source('~/.active-rstudio-document')
naga7k()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
naga7()
source('~/.active-rstudio-document')
rm=(list=ls())
source('~/.active-rstudio-document')
naga7()
rm=(list=ls())
rm(list=ls())
naga7()
source('~/.active-rstudio-document')
naga7()
source('~/.active-rstudio-document')
naga7()
source('~/.active-rstudio-document')
naga7()
source('~/.active-rstudio-document')
naga7()
source('~/.active-rstudio-document')
naga7()
debugSource('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
naga7()
debugSource('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
debugSource('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
naga7()
source('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
naga7()
source('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
naga7()
debugSource('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
source('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
naga7()
debugSource('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
naga7()
debugSource('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
naga7()
source('~/.active-rstudio-document')
rm(list=ls())
source('C:/Users/rofaida.goda/Desktop/ProgrammingAssignment2-master/cachematrix.R')
w = matrix(1:20,4,5)
makeCacheMatrix(w)
k= makeCacheMatrix(w)
cacheSolve(k)
source('C:/Users/rofaida.goda/Desktop/ProgrammingAssignment2-master/cachematrix.R')
cacheSolve(k)
rm(list=ls())
w = matrix(1:20,4,5)
k= makeCacheMatrix(w)
source('C:/Users/rofaida.goda/Desktop/ProgrammingAssignment2-master/cachematrix.R')
k= makeCacheMatrix(w)
cacheSolve(k)
w=matrix(1:16,4,4)
k= makeCacheMatrix(w)
cacheSolve(k)
solve(w)
?solve
w
solve(w)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cache(amatrix)
cacheSolve(amatrix)
amatrix$get()         # Returns original matrix
amatrix$getinverse()
source('C:/Users/rofaida.goda/Desktop/ProgrammingAssignment2-master/cachematrix.R')
amatrix$getinverse()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getinverse()
rm(list=ls())
source('C:/Users/rofaida.goda/Desktop/ProgrammingAssignment2-master/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
source('C:/Users/rofaida.goda/Desktop/ProgrammingAssignment2-master/cachematrix.R')
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getinverse()
rm(list=ls())
source('C:/Users/rofaida.goda/Desktop/ProgrammingAssignment2-master/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix
debugSource('C:/Users/rofaida.goda/Desktop/ProgrammingAssignment2-master/cachematrix.R')
cacheSolve(amatrix)
debugSource('C:/Users/rofaida.goda/Desktop/ProgrammingAssignment2-master/cachematrix.R')
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
source('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
naga7
j= naga7
source('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
naga7k(j)
source('H:/Data Science/Courses/John Hapckins/02 programming with R/trial.R')
j= naga7
naga7k(j)
source('~/.active-rstudio-document')
makeVector <- function() {
m <- NULL
set <- function(y) {
# x <<- y
m <<- NULL
print(m)
}
print(m)
}
makeVector()
source('~/.active-rstudio-document')
makeVector()
source('~/.active-rstudio-document')
makeVector()
source('~/.active-rstudio-document')
rm(list=ls())
source('~/.active-rstudio-document')
makeVector()
source('~/.active-rstudio-document')
makeVector()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
makeVector()
makeVector(1:4,2,2)
makeVector(matrix(1:4,2,2))
jojo = matrix(1:4,2,2)
makeVector(jojo)
jojo = 1:20
makeVector(jojo)
jojo
debugSource('H:/Data Science/Courses/John Hapckins/02 programming with R/makeVector.R')
makeVector(jojo)
View(makeVector)
koko= makeVector(jojo)
cachemean(koko)
x <- 1               ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- letters         ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- TRUE            ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- cars            ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- cars[1]         ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- cars[[1]]       ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- matrix(cars)    ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- new.env()       ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- expression(1+1) ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- quote(y<-1+1)   ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- ls              ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- 1               ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- letters         ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- TRUE            ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- cars            ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- cars[1]         ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- cars[[1]]       ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- matrix(cars)    ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- new.env()       ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- expression(1+1) ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- quote(y<-1+1)   ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- ls              ; c(class(x), mode(x), storage.mode(x), typeof(x))
x <- 1               ; c("                          ",class(x), mode(x), storage.mode(x), typeof(x))
d <- data.frame(V1=c(1,2))
d
gl?
?gl
f = gl(5,2)
f
gl(1:7,2)
gl(7,2)
gl(8,2)
summary(gl(8,2))
gl(40,10)
summary(gl(40, 10))
?pnor,
?pnorm
help("distribution")
?distribution
set.seed(1)
rnorm(20,2,50)
rnorm(20,2,50)
set.seed(1)
rnorm(20,2,50)
set.seed(10)
rnorm(20,2,50)
set.seed(1)
rnorm(20,2,50)
dnorm(20,2,50)
d= rnorm(20,2,50)
dnorm(d)
dd= dnorm(d)
plot(dd,d)
plot(d,dd)
plot(d,dd,type] l)
plot(d,dd,type]=l)
plot(d,dd,type=l)
plot(d,dd,type="l")
qnorm(0.11)
qnorm(0.115)
qnorm(0.1151)
1-qnorm(0.1413)
qnorm(1-0.1413)
pnorm(50)
qnorm(1)
pnorm(0.50)
pnorm(50)
qnorm(50)
qnorm(
0.5)
qnorm(0.1)
qnorm(1)
qnorm(0)
qnorm(0.5)
qnorm(0.55)
qnorm(0.50005)
qnorm(c(1,0,0.5, 0.55))
dnorm(0.2)
0.5-pnorm(0.2)
qnorm(0.2)
qnorm(0.5)
qnorm(0.5)
pnorm(0)
0.5-pnorm(0)
x = seq(1:100,lenght= 100)
x = seq(1, 10,lenght= 100)
?seq()
x = seq(1, 10,lenght.out= 100)
x = seq(1, 10,length.out= 100)
x
pnorm(x)
qnorm(x)
x
pnorm(x)
pnorm(inf)
pnorm(INF)
pnorm(Inf)
pnorm(x)
plot(pnorm(x))
plot(x,pnorm(x))
dnorm(x)
plot(x,dnorm(x))
y = (4,-4,len=100)
y = seq(4,-4, len = 100)
y
plot(y, dnorm(y))
plot(x,dnorm)
plot(x,dnorm(x))
rnorm(50)
plot(rnorm(50))
plot(x,dnorm(x))
plot(y, dnorm(y))
plot(y,pnorm(y))
plot(y,qnorm(y))
plot(y,pnorm(y))
plot(y,dnorm(y))
dnorm(0)
rm(list=ls())
dnorm(0)
exit
quit
getwd()
rm(list=ls()
)
setwd("~/Exploratory DA Course")
?devices
?Devices
windows()
windows()
plot(airquality$Temp)
example("points")
example("points")
dev.cur()
dev.set(3)
dev.set(50)
dev.set(5)
dev.set(4)
dev.set(3)
devices()
devices
?devices
?device
load("swirl")
package("Swirl")
siwlr()
swirl()
packages()
library("swirl", lib.loc="~/R/win-library/3.3")
detach("package:swirl", unload=TRUE)
library("swirl")
swirl()
swirl()
packageVersion(swirl)
packageVersion("swirl")
swirl()
0
dwd
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(12)
abline(h = 12)
hist(ppm, col= "green")
rug(ppm)
low
high
hist(ppm, col= "green", breaks= 100)
rug(ppm)
hist(ppm, col = "green")
abline (v= 12, lwd = 2)
abline (h= 12, lwd = 2)
abline(v= median(ppm), col ="magenta", lwd = 4)
names(pollution)
reg = table (pollution$region)
reg <- table (pollution$region)
reg
reg
barplot(reg, col = "wheat", main = "Number of counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow)
par(mfrow = c(2,1), mar = c(4,4,2,1))
east <- subset[pollution, region == "east"]
east <- subset[pollution, pollution$ region == "east"]
east <- subset(pollution, region == "east")
head(east)
hist(subset(pollution, region == "east"), col = "green")
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd = 2, lty = 2)
hist(pollution$latitude)
hist(pollution$latitude, pollution$pm25, col= pollution$region)
hist(pollution$latitude, pollution$pm25, col= pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
par(lwd=2, lty= 2)
abline(h = 12, lwd= 2, lty = 2)
par(mfrow = c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, pollution$region= "west")
west <- subset(pollution, pollution$region == "west")
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, title = "west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "Eest")
plot(east$latitude, east$pm25, main = "East")
?Devices
dataset()
with(faithful, plot(eruption, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(cars$speed, cars$dist, "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot( life.Exp ~ Income | region ,state, c(4,1))
xyplot( Life.Exp ~ Income | region ,state, layout = c(4,1))
xyplot( Life.Exp ~ Income | region ,state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ ~ hwy, mpg )
qplot(displ, hwy, mpg )
names(mpg)
qplot(displ, hwy, data = mpg )
heda(airquality)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ MOnth, airquality)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone "ppb", col.axis = "blue", col.lab = "Red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone ppb", col.axis = "blue", col.lab = "Red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone ppb", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title (main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
?pch
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title (main = "Wind and Ozone in NYC")
may <- with (airquality, subset (Month == 5))
?subset
subset(airquality, airquality$ Month == 5)
may <- subset(airquality, airquality$ Month == 5)
may <- subset(airquality,Month == 5)
names(par)
names(par())
points(may$Wind, may$Ozone,col= "blue", pch =17 )
notmay <- subset(airquality,Month != 5)
swirl()
notmay <- subset(airquality,Month != 5)
ponits(notmay$Wind, notmay$Ozone, col= "red", pch=".")
points(notmay$Wind, notmay$Ozone, col= "red", pch=".")
points(notmay$Wind, notmay$Ozone, col= "red", pch="8")
points(notmay$Wind, notmay$Ozone, col= "red", pch=8)
source('~/.active-rstudio-document')
# Code by Matt Asher for statisticsblog.com
# Feel free to modify and redistribute
# How many flakes do you want to fall?
flakes = 100
# Width and height of your space
width = 800
height = 600
# Initial wind
wind = 0
# Setup the background of the plot and margins
par(bg = "black")
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
plot(0, 0, col="black", pch=".", xlim=c(0,width), ylim=c(0,height), axes=F)
for(i in 1:flakes) {
startY = height
startX = runif(1,1,width)
xPos = startX
yPos = startY
for(j in 1:height) {
# Optional drift in wind
wind = wind + rcauchy(1,0,.05)
# Update snowflake position
xPos = xPos + rnorm(1,.1,1.5)
yPos = yPos - runif(1,4,20)
# Are we in the space, if so display it
if(xPos &gt; 0 &amp;&amp; xPos &lt;= width &amp;&amp; yPos &gt; 0 &amp;&amp; yPos &lt;= height) {
points(round(xPos), round(yPos), col="white", pch=8)
# System dely, slows down the flakes
Sys.sleep(0.1)
}
}
}
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other
| Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other
Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
par(bg="white")
par$bg="white"
par()$pg = "white"
par()$pg
par()$bg
par()$fg
par()$fg = "white"
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow= c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in the New York City", outer= TRUE)
mtext("Ozone and Weather in New York City", outer= TRUE)
ls()
ls()[1]
get(ls()[1])
sort( sapply(ls(),function(x){object.size(x)}))
sort( sapply(ls(),function(x){object.size(get(x))}))
object.size(flakes)
object.size(get(flakes)
)
lrm(list=ls())
rm(list=ls())
read.table()
getwd()
dir()
setwd("C:\Users\rofaida.goda\Documents\Exploratory DA Course\Week1")
setwd(C:\Users\rofaida.goda\Documents\Exploratory DA Course\Week1)
setwd("C:/Users/rofaida.goda/Documents/Exploratory DA Course/Week1")
getwd()
read.table("household_power_consumption")
read.table("household_power_consumption.txt")
